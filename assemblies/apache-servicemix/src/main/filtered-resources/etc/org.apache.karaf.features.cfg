################################################################################
#
#    Licensed to the Apache Software Foundation (ASF) under one or more
#    contributor license agreements.  See the NOTICE file distributed with
#    this work for additional information regarding copyright ownership.
#    The ASF licenses this file to You under the Apache License, Version 2.0
#    (the "License"); you may not use this file except in compliance with
#    the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
################################################################################

#
# Defines if the startlvl should be respected during feature startup. The default value is true. The default
# behavior for 2.x is false (!) for this property
#
# Be aware that this property is deprecated and will be removed in Karaf 4.0. So, if you need to
# set this to false, please use this only as a temporary solution!
#
#respectStartLvlDuringFeatureStartup=true


#
# Defines if the startlvl should be respected during feature uninstall. The default value is true.
# If true, means stop bundles respecting the descend order of start level in a certain feature.
#
#respectStartLvlDuringFeatureUninstall=true

#
# Comma separated list of features repositories to register by default
#
featuresRepositories = \
    mvn:org.apache.karaf.features/enterprise/${karaf.version}/xml/features, \
    mvn:org.apache.karaf.features/framework/${karaf.version}/xml/features, \
    mvn:org.apache.karaf.features/spring/${karaf.version}/xml/features, \
    mvn:org.apache.karaf.features/standard/${karaf.version}/xml/features, \
    mvn:org.apache.activemq/activemq-karaf/${activemq.version}/xml/features, \
    mvn:org.apache.camel.karaf/apache-camel/${camel.version}/xml/features, \
    mvn:org.apache.cxf.karaf/apache-cxf/${cxf.version}/xml/features, \
    mvn:org.apache.servicemix.features/servicemix-internal/${project.version}/xml/features, \
    mvn:org.apache.servicemix.features/servicemix-examples/${project.version}/xml/features, \
    mvn:org.apache.servicemix.features/servicemix-features/${project.version}/xml/features, \
    mvn:org.apache.servicemix.features/servicemix-kie/${project.version}/xml/features


#
# Comma separated list of features to install at startup
#
featuresBoot = \
    wrap, \
    aries-blueprint, \
    shell, \
    shell-compat, \
    feature, \
    jaas, \
    ssh, \
    management, \
    bundle, \
    config, \
    deployer, \
    diagnostic, \
    instance, \
    kar, \
    log, \
    package, \
    service, \
    system, \
    activemq-broker-noweb, \
    activemq-camel, \
    camel, \
    cxf, \
    camel-cxf, \
    camel-blueprint, \
    activemq-service, \
    camel-xstream, \
    war

#
# Resource repositories (OBR) that the features resolver can use
# to resolve requirements/capabilities
#
# The format of the resourceRepositories is
# resourceRepositories=[xml:url|json:url],...
# for Instance:
#
#resourceRepositories=xml:http://host/path/to/index.xml
# or
#resourceRepositories=json:http://host/path/to/index.json
#

#
# Defines if the boot features are started in asynchronous mode (in a dedicated thread)
#
featuresBootAsynchronous=false

#
# Service requirements enforcement
#
# By default, the feature resolver checks the service requirements/capabilities of
# bundles for new features (xml schema >= 1.3.0) in order to automatically installs
# the required bundles.
# The following flag can have those values:
#   - disable: service requirements are completely ignored
#   - default: service requirements are ignored for old features
#   - enforce: service requirements are always verified
#
#serviceRequirements=default


